[
  {
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "annotation": "It's weird that streamlit-base is faster than python-threads. Must be an artifact of how the tests are run. My guess is that the loop where Playwright clicks on the \"Run\" button in the Streamlit app is just slow enough to make a few tasks end before new ones begin, giving streamlit-base an unfair advantage."
  },

  {
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "annotation": "The fact that Streamlit's performance between 5-10 users is so good makes me think this is indeed an artifact of new tasks starting when some old ones already ended. So I think the data for 25-50 users is more representative."
  },

  {
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 100,
    "sleep_time_between_multiplications": 0,
    "annotation": "No idea what's going on here. Why is Streamlit faster than threads? Must be due to some artifact I'm missing..."
  },

  {
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1000,
    "sleep_time_between_multiplications": 0,
    "annotation": "This chart looks more like what I'd expect! Plain Streamlit mostly tracks Python threading, though it's a bit slower. And Streamlit + processpool is exactly as good as Python processpool."
  },

  {
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "annotation": "This is all over the place. I'll just call it a tie. One thing to note: my guess is the reason Streamlit+processpool does so well here is because it's at that sweet spot where each new user is finishing after the previous user, so the same process is being reused."
  },

  {
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "annotation": "The two processpool-based tests are basically tied here, while Streamlit base and Python threads alternate a bit -- so I'll call that a tie too."
  },

  {
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 100,
    "sleep_time_between_multiplications": 0,
    "annotation": "Again, the two processpool-based tests are tied here, but this time Streamlit base is *faster then* Python threads. That's very unexpected."
  },

  {
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1000,
    "sleep_time_between_multiplications": 0,
    "annotation": "This behaves as expected: Streamlit base matches Python threads, and Streamlit processpool matches Python processpool."
  }
]
