[
  {
    "analysis_type": "timeseries",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "It's weird that Streamlit-base is faster than Python-threads. Must be an artifact of how the tests are run. My guess is that the loop where Playwright clicks on the \"Run\" button in the Streamlit app is just slow enough to cause a few tasks to end before new ones begin, giving Streamlit-base an unfair advantage."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "The fact that Streamlit's performance between 5-10 users is so good makes me think this is indeed an artifact of new tasks starting when some old ones already ended. So I think the data for 25-50 users is more representative."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 100,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "No idea what's going on here. Why is Streamlit faster than threads? Must be due to some artifact I'm missing..."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1000,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "This chart looks more like what I'd expect! Plain Streamlit mostly tracks Python threading, though it's a bit slower. And Streamlit + processpool is exactly as good as Python processpool."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "This is all over the place. I'll just call it a tie. One thing to note: my guess is the reason Streamlit+processpool does so well here is because it's at that sweet spot where each new user is finishing after the previous user, so the same process is being reused."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "The two processpool-based tests are basically tied here, while Streamlit base and Python threads alternate a bit -- so I'll call that a tie too."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 100,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "Again, the two processpool-based tests are tied here, but this time Streamlit base is *faster then* Python threads. That's very unexpected."
  },

  {
    "analysis_type": "timeseries",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1000,
    "sleep_time_between_multiplications": 0,
    "num_users": null,
    "annotation": "This behaves as expected: Streamlit base matches Python threads, and Streamlit processpool matches Python processpool."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 1,
    "annotation": "Python beats Streamlit, but in terms of absolute numbers and user perception everything is more or less equally fast: the range is 59-90ms, so differences are barely noticeable."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 2,
    "annotation": "Streamlit-base is fastest, but this must be some artifact of how the tests are run. So let's say this is another tie. My guess is that the loop where Playwright clicks on the \"Run\" button in the Streamlit app is just slow enough (need to find the \"Run\" button) to cause a few tasks to end before new ones begin, giving streamlit-base an unfair advantage."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 5,
    "annotation": "Streamlit-processpool matches Python-processpool, and Streamlit-base is faster than Python-threads, though probably due to the artifact mentioned earlier."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 10,
    "annotation": "Streamlit tends to win out vs the matching Python experiment, again, I'll chalk it out to the potential testing artifact mentioned earlier."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 25,
    "annotation": "Same as above. Although here it's also interesting how large the variance in the Python-threads experiment is."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 50,
    "annotation": "Same as above."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 1,
    "annotation": "Python beats Streamlit, but in terms of absolute numbers and user perception everything is more or less equally fast: the range is 58-79ms, so differences are barely noticeable."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 2,
    "annotation": "Same as above."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 5,
    "annotation": "Python-threads beats Streamlit again, but not in any user-noticeable manner. Interestingly, Python-processpool has a pretty wide variance in this case."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 10,
    "annotation": "Same as above."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 25,
    "annotation": "Each Streamlit and Python pair is about the same in terms of median, the Python variance is all over the place."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "spread_out",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 1,
    "sleep_time_between_multiplications": 0,
    "num_users": 50,
    "annotation": "Streamlit continues to take the lead. I still feel like this should be due to some testing artifact. So let's just say it's a tie."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 1,
    "annotation": "Python-threads beats Streamlit, but in terms of absolute numbers and user perception everything is more or less equally fast: the range is 58-64ms, so differences are barely noticeable."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 2,
    "annotation": "At 2 concurrent users and 10M multiplications each it becomes a good idea to do the multiplications in a separate process. You'll see this trend only grow below. However, note how Streamlit and Python are about the same."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 5,
    "annotation": "Same as above. And notice how the difference between threaded and processpool versions is further increasing now."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 10,
    "annotation": "Same as above, though here Python-threads starts having a huge variance, which causes its median to jump up. Unclear why, though it would be due to small delays in how Playwright controls the Streamlit tests, giving Streamlit an advantage due to fewer users being truly concurrent on average."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 25,
    "annotation": "Same as above. Here we start seeing Streamlit-processpool starting to losing against Python-processpool. This could be due to the way the tests are run: the Streamlit server is running on the same machine as the Playwright-controlled browser with 25 tabs. With a busier machine, there are fewer CPU cycles to go around. This wouldn't happen in the real-world, though, where users have their own machines."
  },

  {
    "analysis_type": "shootout",
    "user_arrival_style": "together",
    "num_stuff_to_draw": 100,
    "computation": "multiply_numbers",
    "num_multiplications": 10,
    "sleep_time_between_multiplications": 0,
    "num_users": 50,
    "annotation": "Same as above."
  }
]
